name: CI

on: push

jobs:
  build:
    # You must use a Linux environment when using service containers or container jobs
    runs-on: ubuntu-latest
    env:
      TCM_TEST_PASSWORD: password
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    steps:
      # Downloads a copy of the code in your repository before running CI tests
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of sonarcloud analysis

      # Our projects use .java-version files to specify the Java version to use. We can read and then output it as the
      # result this step. Subsequent steps can then access the value
      - name: Read Java version
        run: echo "##[set-output name=JAVAV;]$(cat .java-version)"
        # Give the step an ID to make it easier to refer to
        id: jvm

      # Gets the version to use by referring to the previous step
      - name: Install Java
        uses: actions/setup-java@v1
        with:
          java-version: "${{ steps.jvm.outputs.JAVAV }}"

      # Speeds up workflows by reading the maven packages from cache. Obviously you need to run it at least once, and the
      # the cache will be updated should the pom.xml file change
      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      # With maven already installed it should help build times by not running our local version (./mvnw).
      # The actual maven command does a bunch of things
      #
      # - remove build time files
      # - compile the code and package as a JAR
      # - run unit tests
      # - prepare test coverage information
      # - install the JAR to the local repository (needed to ensure everything is up to date for SonarCloud)
      # - run the SonarCloud analysis and send result to SonarCloud
      - name: Build with Maven
        run: |
          mvn clean package org.jacoco:jacoco-maven-plugin:prepare-agent install sonar:sonar -Dsonar.projectKey=DEFRA_sroc-tcm-acceptance-tests

      # Both Chrome and chromedriver are available as part of ubuntu-latest
      # https://github.com/actions/virtual-environments/blob/main/images/linux/Ubuntu1804-README.md#browsers-and-drivers
      # Our issue is the project was setup to expect the chromedriver executable to be available in a specific place
      # (drivers/). So for now we stick with what we did when using Travis for CI, updated based on code found in the
      # setup-chromedriver action (https://github.com/nanasess/setup-chromedriver)
      #
      # - determine the currently installed version of Chrome
      # - use curl to get the matching chromedriver version
      # - use wget to download the chromedriver zip file
      # - extract chromedriver to our drivers/ folder
      - name: Install Chromedriver
        run: |
          CHROME_VERSION=$(google-chrome --version | cut -f 3 -d ' ' | cut -d '.' -f 1)
          VERSION=$(curl --location --fail --retry 10 http://chromedriver.storage.googleapis.com/LATEST_RELEASE_${CHROME_VERSION})
          wget -c -nc --retry-connrefused --tries=0 https://chromedriver.storage.googleapis.com/${VERSION}/chromedriver_linux64.zip
          unzip chromedriver_linux64.zip -d /home/runner/work/sroc-tcm-acceptance-tests/sroc-tcm-acceptance-tests/drivers

      - name: Run tests
        run: |
          java -jar target/sroc-tcm-acceptance-tests.jar example.config.yml
